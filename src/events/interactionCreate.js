const fs = require('fs');
const path = require('path');
const { Events, Collection, MessageFlags } = require('discord.js');

const buttons = new Collection();
const selects = new Collection();  // –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è select menu
const modals = new Collection();   // –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω

module.exports = {
    name: Events.InteractionCreate,
    async execute(interaction) {
        try {
            // üîπ Slash-–∫–æ–º–∞–Ω–¥—ã
            if (interaction.isChatInputCommand()) {
                const command = interaction.client.commands.get(interaction.commandName);

                if (!command) {
                    console.error(`‚ùå No command matching ${interaction.commandName} was found.`);
                    return;
                }

                await command.execute(interaction);
            }

            // üîπ –ö–Ω–æ–ø–∫–∏
            else if (interaction.isButton()) {
                // –ö—ç—à–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
                if (buttons.size === 0) {
                    const buttonsPath = path.join(__dirname, '../interactions/buttons');
                    const buttonFiles = fs.readdirSync(buttonsPath).filter(file => file.endsWith('.js'));

                    for (const file of buttonFiles) {
                        const button = require(`${buttonsPath}/${file}`);
                        if (button.customId && typeof button.execute === 'function') {
                            buttons.set(button.customId, button);
                        }
                    }
                }

                const button = buttons.get(interaction.customId);
                if (!button) return;

                await button.execute(interaction);
            }

            // üîπ Select Menu
            else if (interaction.isStringSelectMenu()) {
                // –ö—ç—à–∏—Ä—É–µ–º select menu –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
                if (selects.size === 0) {
                    const selectsPath = path.join(__dirname, '../interactions/selects');
                    const selectFiles = fs.readdirSync(selectsPath).filter(file => file.endsWith('.js'));

                    for (const file of selectFiles) {
                        const select = require(`${selectsPath}/${file}`);
                        if (select.customId && typeof select.execute === 'function') {
                            selects.set(select.customId, select);
                        }
                    }
                }

                const select = selects.get(interaction.customId);
                if (!select) return;

                await select.execute(interaction);
            }

            // üîπ –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
            else if (interaction.isModalSubmit()) {
                // –ö—ç—à–∏—Ä—É–µ–º –º–æ–¥–∞–ª–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
                if (modals.size === 0) {
                    const modalsPath = path.join(__dirname, '../interactions/modals');
                    const modalFiles = fs.readdirSync(modalsPath).filter(file => file.endsWith('.js'));

                    for (const file of modalFiles) {
                        const modal = require(`${modalsPath}/${file}`);
                        if (modal.customId && typeof modal.execute === 'function') {
                            modals.set(modal.customId, modal);
                        }
                    }
                }

                const modal = modals.get(interaction.customId);
                if (!modal) return;

                await modal.execute(interaction);
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–∏:`, error);

            const content = '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!';
            if (interaction.replied || interaction.deferred) {
                await interaction.followUp({ content, flags: MessageFlags.Ephemeral });
            } else {
                await interaction.reply({ content, flags: MessageFlags.Ephemeral });
            }
        }
    },
};
